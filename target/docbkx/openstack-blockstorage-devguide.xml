<?xml version="1.0" encoding="utf-8"?>
<?rax-warinfo openstack-blockstorage-devguide?><book xmlns="http://docbook.org/ns/docbook" xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      version="5.0"
      xml:id="openstack-blockstorage-devguide"
      xml:base="file:///Users/davi4555/Downloads/cloudtoy/openstack-volume/volume-api/src/docbkx/openstack-blockstorage-devguide.xml">
 <?rax title.font.size="35px" subtitle.font.size="20px"?>
  <info>
      <title>OpenStack Block Storage Service Developer Guide</title>
      <titleabbrev>OpenStack Block Storage Service Developer Guide</titleabbrev>
      <copyright>
         <year>2012</year>
      </copyright>
      <releaseinfo>API v1.0</releaseinfo>
      <productname>OpenStack Block Storage Service</productname>
      <pubdate>2012-12-17</pubdate>
      <legalnotice role="apache2">
         <annotation>
            <remark>Copyright details are filled in by the
          template.</remark>
         </annotation>
      </legalnotice>
      <abstract>
         <para>This document is intended for software developers
        interested in developing applications using the OpenStack Block Storage Service
        Application Programming Interface
          (<abbrev>API</abbrev>). </para>
      </abstract>
      <revhistory>
         <revision>
            <date>2012-12-17</date>
            <revdescription>
               <itemizedlist spacing="compact">
                  <listitem>
                     <para>Edits to initial version; .</para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
         <revision>
            <date>2012-10-17</date>
            <revdescription>
               <itemizedlist spacing="compact">
                  <listitem>
                     <para>Initial release.</para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
      </revhistory>
  </info>
  <preface xml:id="Overview">
      <title>OpenStack API Reference</title>

      <para>The OpenStack system has several key projects that are
    separate installations but can work together depending on your
    cloud needs: OpenStack Compute, OpenStack Object Storage,
    OpenStack Block Storage,
    OpenStack Identity Service, and OpenStack Image Service.</para>

      <para>This page covers the basics for working with your OpenStack
    cloud through the Compute API and Image API after authorizing with
    the Identity Service API. You can then build a cloud by launching
    images and assigning metadata to instances, all through an
    API. Refer to the <link xlink:href="http://docs.openstack.org/api/quick-start/content/">API Quick Start
    Guide</link> for details about using the APIs referenced here, and
    go to <link xlink:href="http://docs.openstack.org/api/">docs.openstack.org/api</link>
    for specifications of each API.
    </para>
  </preface>
  <preface xml:id="overview">
      <title>Overview</title>
      <para>OpenStack Block Storage Service is a block-level storage
      solution that allows customers to mount drives or volumes to
      their OpenStack Cloud Servers<trademark/>. The
      two primary use cases are (1) to allow customers to scale their
      storage independently from their compute resources, and (2)
      to allow customers to utilize high performance storage to serve
      database or I/O-intensive applications. 
    </para>
      <para>Interactions with Block Storage occur programmatically via the Block 
      Storage API as described in this Developer Guide.
    </para>
      <para>Highlights of OpenStack Block Storage Service include:<itemizedlist>
            <listitem>
               <para>Mount a drive to a Cloud Server to scale storage
          without paying for more compute capability.</para>
            </listitem>
         </itemizedlist>
      </para>
      <note>
         <title>Notes</title>
         <itemizedlist>
            <listitem>
               <para>OpenStack Block Storage Service is an add-on feature to
            OpenStack Nova Compute. </para>
            </listitem>
            <listitem>
               <para>Block Storage is multi-tenant rather than
            dedicated.</para>
            </listitem>
            <listitem>
               <para>Block Storage allows you to create snapshots
            that you can save, list, and restore.</para>
            </listitem>
         </itemizedlist>
      </note>
      <section xml:id="Intended_Audience-d1e122">
         <title>Intended Audience</title>
         <para>This Guide is intended to assist software developers who
        want to develop applications using the Block Storage
        API. It assumes the reader has a general understanding of
        storage and is familiar with: </para>
         <itemizedlist spacing="compact">
            <listitem>
               <para>ReSTful web services</para>
            </listitem>
            <listitem>
               <para>HTTP/1.1 conventions</para>
            </listitem>
            <listitem>
               <para>JSON and/or XML data serialization formats</para>
            </listitem>
         </itemizedlist>
      </section>
      <?hard-pagebreak?>
    <section xml:id="Document_Change_History-d1e166">
         <title>Document Change History</title>
         <para>This version of the Developer Guide replaces and obsoletes
        all previous versions. The most recent changes are described
        in the table below:</para>
         <?rax revhistory?>
    </section>
      <section xml:id="Additional_Resources-d1e532">
         <title>Additional Resources</title>

         <para>You can download the most current versions of the
        API-related documents from <link xlink:href="http://docs.openstack.com/api/">docs.openstack.com/api/</link>. 
      </para>
         <para>This API uses standard HTTP 1.1 response codes as
        documented at: <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>.
      </para>
      </section>

      <section xml:id="Concepts">
         <title>Concepts</title>
         <?dbhtml stop-chunking?>
    <para> To use the Block Storage API effectively, you should
      understand several key concepts: </para>
         <section xml:id="Instance">
            <title>Instance</title>
            <para>An instance is a virtual machine that
        runs inside the cloud.</para>
         </section>
         <section xml:id="Instance_Type">
            <title>Instance Type</title>
            <para>An instance type describes the
        compute, memory and storage capacity of Nova computing
        instances. In layman's terms, this is the size (in terms of
        vCPUs, RAM, and so forth) of the virtual server that you will
        be launching.</para>
         </section>
         <section xml:id="Snapshot">
            <title>Snapshot</title>
            <para>A snapshot is a point in time copy of the data
          contained in a volume. 
        </para>
         </section>
         <section xml:id="Volume">
            <title>Volume</title>
            <para>A volume is a detachable block
        storage device. You can think of it as a USB hard drive. It
        can only be attached to one instance at a time.
      </para>
         </section>
         <section xml:id="Volumetype">
            <title>Volume Type</title>
            <para>The volume type is the type of a block storage volume.
          You may define whatever types work best for you, such as 
          SATA, SCSCI, SSD, etc. These can be customized or defined
          by the OpenStack admin.
        </para>
            <para>
          You may also define extra_specs associated with your
          volume types. For instance, you could have a 
          VolumeType=SATA, with extra_specs (RPM=10000, RAID-Level=5) .
          Extra_specs are defined and customized by the admin.
        </para>
         </section>      
      
      </section>
  </preface>
  
  <chapter xml:id="General_API_Information-d1e633">
      <title>General API Information</title>
      <!--   <para> The Block Storage API is implemented using a ReSTful
      web service interface. Like other products in the Rackspace
      Cloud suite, Block Storage shares a common token-based
      authentication system that allows seamless access between
      products and services. </para>
    <note>
      <para> All requests to authenticate against and operate the
        service are performed using SSL over HTTP (HTTPS) on TCP port
        443. </para>
    </note>
    -->
    <section xml:id="Authentication-d1e647">
         <title>Authentication</title>
      
        <para>Authentication tokens are typically valid for 24 hours.
          Applications should be designed to re-authenticate after
          receiving a 401 (Unauthorized) response from a service
          endpoint. </para>
        <important>
            <para>If you are programmatically parsing an authentication
            response, please be aware that service names are stable
            for the life of the particular service and can be used as
            keys. You should also be aware that a user's service
            catalog can include multiple uniquely-named services which
            perform similar functions. For example,
            cloudServersOpenStack is the OpenStack version of compute
            whereas cloudServers is the legacy version of compute; the
            same user can have access to both services. In Auth 2.0,
            the service type attribute can be used as a key by which
            to recognize similar services; see the tip below.</para>
        </important>
        <tip>
            <para>Beginning with Auth 2.0, the service catalog includes
            a service type attribute to identify services that perform
            similar functions but have different names; for example,
              <code>type="compute"</code> identifies compute services
            such as cloudServers and cloudServersOpenStack. Some
            developers have found the service type attribute to be
            useful in parsing the service catalog. For Auth 2.0 (also
            known as the Cloud Identity Service), you can see the
            service type attribute in the "Service Catalog in
            Authentication Response" samples in the <citetitle>Cloud
              Identity Client Developer Guide</citetitle> at <link xlink:href="http://docs.openstack.com/auth/api/v2.0/auth-client-devguide/content/Sample_Request_Response-d1e64.html">http://docs.openstack.com/auth/api/v2.0/auth-client-devguide/content/Sample_Request_Response-d1e64.html</link>.</para>
        </tip>

      </section>
      <section xml:id="Service_Access_Endpoints-d1e753">
         <title>Service Access/Endpoints</title>
         <para>The Block Storage Service is a regionalized service.
        The user of the service is therefore responsible for
        appropriate replication, caching, and overall maintenance of
        Block Storage data across regional boundaries to other
        Block Storage servers.</para>
         <para>You can find the available service access/endpoints for
        Block Storage summarized in the table below.</para>
         <para>Replace the sample account ID number,
          <parameter>1234</parameter>, with your actual account number
        returned as part of the authentication service
        response.</para>
         <para>You will find the actual account number after the final
        '/' in the <code>publicURL</code> field returned by the
        authentication response.</para>
      </section>
      <section xml:id="DB_service_versions">
         <title>Block Storage Service Versions</title>
         <para>The Block Storage version defines the contract and
        build information for the API. </para>
         <section xml:id="Contract_Version-d1e825">
            <title>Contract Version</title>
            <para> The contract version denotes the data model and
          behavior that the API supports. The requested contract
          version is included in all request URLs. Different contract
          versions of the API may be available at any given time and
          are not guaranteed to be compatible with one another. </para>
            <example>
               <title>Example Request URL (contract version in <emphasis role="strong">bold</emphasis>)</title>
               <programlisting>https://dfw.blockstorage.api.openstackcloud.com/v1/1234/</programlisting>
            </example>
            <note>
               <para>This document pertains to contract version 1.0.</para>
            </note>
         </section>
      </section>
      <section xml:id="Request_Response_Types-d1e903">
         <title>Request/Response Types</title>
         <para>The Block Storage API supports both the JSON and
        XML data serialization formats. The request format is
        specified using the <code>Content-Type</code> header and is
          required for calls that have a request
        body. The response format can be specified in requests either
        by using the <code>Accept</code> header or by adding an
          <code>.xml</code> or <code>.json</code> extension to the
        request URI. Note that it is possible for a response to be
        serialized using a format different from the request. If no
        response format is specified, JSON is the default. If
        conflicting formats are specified using both an
          <code>Accept</code> header and a query extension, the query
        extension takes precedence.</para>
      
      
         <table rules="all">
            <caption>Response Formats</caption>
            <?dbfo keep-together="always"?>
        <thead>
               <tr align="center">
                  <td>Format</td>
                  <td>Accept Header</td>
                  <td>Query Extension</td>
                  <td>Default</td>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <td>JSON</td>
                  <td>application/json</td>
                  <td>.json</td>
                  <td>Yes</td>
               </tr>
               <tr>
                  <td>XML</td>
                  <td>application/xml</td>
                  <td>.xml</td>
                  <td>No</td>
               </tr>
            </tbody>
         </table>

         <para>In the request example below, notice that
          <parameter>Content-Type</parameter> is set to
          <parameter>application/json</parameter>, but
          <parameter>application/xml</parameter> is requested via the
          <parameter>Accept</parameter> header:</para>

         <example>
            <title>Request with Headers (Getting Volume Types)</title>
            <literallayout class="monospaced">
  GET /v1/441446/types HTTP/1.1
  Host: dfw.blockstorage.api.openstackcloud.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Accept: application/xml
                    </literallayout>
         </example>

         <para><?rax-fo keep-with-next?>Therefore an XML response format
        is returned:</para>

         <example>
            <title>Response with Headers</title>
            <literallayout class="monospaced">
  HTTP/1.1 200 OK
  Date: Fri, 20 Jul 2012 20:32:13 GMT
  Content-Length: 187
  Content-Type: application/xml
  X-Compute-Request-Id: req-8e0295cd-a283-46e4-96da-cae05cbfd1c7
  
  &lt;?xml version='1.0' encoding='UTF-8'?&gt;
  &lt;volume_types&gt;
      &lt;volume_type id="1" name="SATA"&gt;
          &lt;extra_specs/&gt;
      &lt;/volume_type&gt;
      &lt;volume_type id="2" name="SSD"&gt;
          &lt;extra_specs/&gt;
      &lt;/volume_type&gt;
  &lt;/volume_types&gt;
     </literallayout>
         </example>

      </section>
    
      <!-- 
    <section xml:id="sync_asynch_responses" security="writeronly">
      <title>Synchronous and Asynchronous Responses</title>
      <remark security="reviewer">Reviewer: please give me the updated info for this
        section. Need to replace info about callback URL,
        etc.</remark>
      <para> All successful &GET; requests are
          synchronous calls, since they are
        always retrieving (reading) existing information. With these
        requests, the caller waits until the call returns with the
        specified code and response body. For an example, see
        XXXX.</para>
      <para>&PUT;, &POST;, and &DELETE; calls are
          asynchronous, however, since they may
        take some time to process. Therefore they return 202 ACCEPTED
        responses containing information with a callback URL, which
        allows the progress, status, and/or response information of
        the call to be retrieved at a later point in time. The
        asynchronous response body will look similar to the following
        examples, depending on the format requested:</para>
      <example>
        <title>202 ACCEPTED Response: XML</title>
        <?dbfo keep-together="always"?>
        <programlisting language="xml">Reviewer: need code example</programlisting>
      </example>
      <example>
        <title>202 ACCEPTED Response: JSON</title>
        <?dbfo keep-together="always"?>
        <programlisting language="json">Reviewer: need code example</programlisting>
      </example>
      <para>The following table shows the attributes for asynchronous
        responses:</para>
      <table rules="all">
        <caption>Attributes for Asynchronous Responses</caption>
        <?dbfo keep-together="always"?>
        <thead>
          <tr align="center">
            <td colspan="1">Attribute</td>
            <td colspan="4">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">jobId</td>
            <td colspan="4">An identifier for the specific
              request.</td>
          </tr>
          <tr>
            <td colspan="1">callbackUrl</td>
            <td colspan="4">Resource locator for querying the status
              of the request.</td>
          </tr>
        </tbody>
      </table>
      <note>
        <para>The status for asynchronous calls is retained for up to
          24 hours.</para>
      </note>
      <note>
        <para>If a request body does not pass initial validation or an
          error condition arises, you may receive an immediate error
          response from the request.</para>
      </note>
      <para>When a request is made to the callback URL provided and
        the job is still running, another
          <returnvalue>202</returnvalue> ACCEPTED response is returned
        with the same information as the previous one. If the request
        is complete, the response will be as if the original call
        returned as normal, without waiting. For example, if a Create
        Database request was issued and a 202 asynchronous response
        was returned, the response from querying the callback URL for
        a completed successful database creation would be a
          <returnvalue>200</returnvalue> OK and contain the
        information for the created database. See XXXX for a specific
        example.</para>
      <para>If an error occurs during the processing of the create
        request, querying the callback URL will return the details of
        the error, as if the original call returned the error
        response. For example, if a validation error occurs during the
        Create Database request above, the response from querying the
        callback URL would be a <returnvalue>400</returnvalue> BAD
        REQUEST and contain details regarding the specific validation
        error.</para>
      <note>
        <para>If the response from querying a callback URL is a
            <returnvalue>404</returnvalue> NOT FOUND, the details of
          the error in the response body will contain information the
          caller may use to determine whether the specified job itself
          was not found, or if the response from the original request
          was a <returnvalue>404</returnvalue> NOT FOUND. </para>
      </note>
      <para>The description of each &PUT;, &POST;, and &DELETE;
        request identifies the response codes that can indicate
        success or error for that request. For example, see XXXX
        immediately below the table for a list of the successful and
        error response codes for the POST /xxxx call.</para>
    </section>
    <section xml:id="Content_Compression-d1e1120"
      security="writeronly">
      <title>Content Compression</title>
      <remark security="reviewer">Reviewer: I am hiding this entire section for the
        Private Beta, since I'm not sure that it applies. Is that
        correct?</remark>
      <para> Request and response body data may be encoded with gzip
        compression to accelerate interactive performance of API calls
        and responses. This is controlled using the
          <code>Accept-Encoding</code> header on the request from the
        client and indicated by the <code>Content-Encoding</code>
        header in the server response. Unless the header is explicitly
        set, encoding defaults to disabled. </para>
      <table rules="all">
        <caption>Encoding Headers</caption>
        <?dbfo keep-together="always"?>
        <thead>
          <tr align="center">
            <td>Header Type</td>
            <td>Name</td>
            <td>Value</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>HTTP/1.1 Request</td>
            <td><code>Accept-Encoding</code></td>
            <td>gzip</td>
          </tr>
          <tr>
            <td>HTTP/1.1 Response</td>
            <td><code>Content-Encoding</code></td>
            <td>gzip</td>
          </tr>
        </tbody>
      </table>
    </section>
    <section xml:id="Persistent_Connections-d1e1187"
      security="writeronly">
      <title>Persistent Connections</title>
      <remark security="reviewer">Reviewer: I am hiding this entire section for the
        Private Beta, since I'm not sure that it applies. Is that
        correct?</remark>
      <para> By default, the API supports persistent connections via
        HTTP/1.1 keepalives. All connections will be kept alive unless
        the connection header is set to close. </para>
      <para> To prevent abuse, HTTP sessions have a timeout of 20
        seconds before being closed. </para>
      <note>
        <para> The server may close the connection at any time and
          clients should not rely on this behavior. </para>
      </note>
    </section>
    -->
    <?hard-pagebreak?>
    <section xml:id="Limits-d1e1208">
         <title>Limits</title>
         <para> All accounts, by default, have a preconfigured set of
        thresholds (or limits) to manage capacity and prevent abuse of
        the system. The system recognizes two kinds of limits:
          <firstterm>rate limits</firstterm> and <firstterm>absolute
          limits</firstterm>. Rate limits are thresholds that are
        reset after a certain amount of time passes. Absolute limits
        are fixed. </para>
      
         <section xml:id="Absolute_Limits-d1e1397">
            <title>Absolute Limits</title>

            <para>Refer to the following table for the absolute limits
          that are set.</para>
            <table rules="all">
               <caption>Absolute Limits</caption>
               <col width="120pt"/>
               <col width="201pt"/>
               <col width="50pt"/>
               <thead>
                  <tr>
                     <td colspan="1">Name</td>
                     <td colspan="1">Description</td>
                     <td colspan="1">Limit</td>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td colspan="1">Block Storage</td>
                     <td colspan="1">Maximum amount of block storage (in gigabytes) 
               </td>
                     <td colspan="1">1 TB</td>
                  </tr>
               </tbody>
            </table>
         </section>
      </section>
      <section xml:id="datetimeformat">
         <title>Date/Time Format</title>
         <para> The Block Storage Service uses an ISO-8601
        compliant date format for the display and consumption of
        date/time values. </para>
         <example>
            <title>DB Service Date/Time Format</title>
            <programlisting>yyyy-MM-dd'T'HH:mm:ss.SSSZ</programlisting>
            <para>See the table below for a description of the date/time
          format codes.</para>
            <para>May 19th, 2011 at 8:07:08 AM, GMT-5 would have the
          following format:</para>
            <programlisting>2011-05-19T08:07:08-05:00</programlisting>
         </example>
         <table rules="all">
            <caption>Explanation of Date/Time Format Codes</caption>
            <thead>
               <tr>
                  <td>Code</td>
                  <td>Description</td>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <td>yyyy</td>
                  <td>Four digit year</td>
               </tr>
               <tr>
                  <td>MM</td>
                  <td>Two digit month</td>
               </tr>
               <tr>
                  <td>dd</td>
                  <td>Two digit day of month</td>
               </tr>
               <tr>
                  <td>T</td>
                  <td>Separator for date/time</td>
               </tr>
               <tr>
                  <td>HH</td>
                  <td>Two digit hour of day (00-23)</td>
               </tr>
               <tr>
                  <td>mm</td>
                  <td>Two digit minutes of hour</td>
               </tr>
               <tr>
                  <td>ss</td>
                  <td>Two digit seconds of the minute</td>
               </tr>
               <tr>
                  <td>SSS</td>
                  <td>Three digit milliseconds of the second</td>
               </tr>
               <tr>
                  <td>Z</td>
                  <td>RFC-822 timezone</td>
               </tr>
            </tbody>
         </table>
      </section>
    
    
      <section xml:id="DB_faults">
         <title>Faults</title>
         <para> When an error occurs, the Block Storage Service
        returns a fault object containing an HTTP error response code
        that denotes the type of error. In the body of the response,
        the system will return additional information about the fault. </para>
         <para>The following table lists possible fault types with their
        associated error codes and descriptions.</para>
         <informaltable rules="all">
            <thead>
               <tr align="center">
                  <td colspan="2">Fault Type</td>
                  <td colspan="1">Associated Error Code</td>
                  <td colspan="3">Description</td>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <td colspan="2">
                     <code>badRequest</code>
                  </td>
                  <td colspan="1">400</td>
                  <td colspan="3">There was one or more errors in the user
              request.</td>
               </tr>
               <tr>
                  <td colspan="2">
                     <code>unauthorized</code>
                  </td>
                  <td colspan="1">401</td>
                  <td colspan="3">The supplied token is not authorized to
              access the resources, either it's expired or
              invalid.</td>
               </tr>
               <tr>
                  <td colspan="2">
                     <code>forbidden</code>
                  </td>
                  <td colspan="1">403</td>
                  <td colspan="3">Access to the requested resource was
              denied.</td>
               </tr>
               <tr>
                  <td colspan="2">
                     <code>itemNotFound</code>
                  </td>
                  <td colspan="1">404</td>
                  <td colspan="3">The back-end services did not find
              anything matching the Request-URI.</td>
               </tr>
               <tr>
                  <td colspan="2">
                     <code>badMethod</code>
                  </td>
                  <td colspan="1">405</td>
                  <td colspan="3">The request method is not allowed for this
              resource.</td>
               </tr>
               <tr>
                  <td colspan="2">
                     <code>overLimit</code>
                  </td>
                  <td colspan="1">413</td>
                  <td colspan="3">Either the number of entities in the
              request is larger than allowed limits, or the user has
              exceeded allowable request rate limits. See the
                <code>details</code> element for more specifics.
              Contact support if you think you need higher request
              rate limits.</td>
               </tr>
               <tr>
                  <td colspan="2">
                     <code>badMediaType</code>
                  </td>
                  <td colspan="1">415</td>
                  <td colspan="3">The requested content type is not
              supported by this service.</td>
               </tr>
               <tr>
                  <td colspan="2">
                     <code>unprocessableEntity</code>
                  </td>
                  <td colspan="1">422</td>
                  <td colspan="3">The requested resource could not be
              processed on at the moment.</td>
               </tr>
               <tr>
                  <td colspan="2">
                     <code>instanceFault</code>
                  </td>
                  <td colspan="1">500</td>
                  <td colspan="3">This is a generic server error and the
              message contains the reason for the error. This error
              could wrap several error messages and is a catch
              all.</td>
               </tr>
               <tr>
                  <td colspan="2">
                     <code>notImplemented</code>
                  </td>
                  <td colspan="1">501</td>
                  <td colspan="3">The requested method or resource is not
              implemented.</td>
               </tr>
               <tr>
                  <td colspan="2">
                     <code>serviceUnavailable</code>
                  </td>
                  <td colspan="1">503</td>
                  <td colspan="3">The Block Storage Service is not
              available.</td>
               </tr>
            </tbody>
         </informaltable>
         <para>
        The following two <code>instanceFault</code> examples show
        errors when the server has erred or cannot perform the
        requested operation:</para>
         <example>
            <title>Example instanceFault Response: XML</title>
            <?dbfo keep-together="always"?>
        <programlisting language="xml">
HTTP/1.1 500 Internal Server Error
Content-Type: application/xml
Content-Length: 121
Date: Mon, 28 Nov 2011 18:19:37 GMT

&lt;instanceFault code="500" xmlns="http://docs.rackspace.com/cbs/api/v1.0"&gt;
    &lt;message&gt;
        The server has either erred or is incapable of performing the requested operation.
    &lt;/message&gt;
&lt;/instanceFault&gt;

                    </programlisting>
         </example>
         <example>
            <title>Example Fault Response: JSON</title>
            <?dbfo keep-together="always"?>
        <programlisting language="json">
HTTP/1.1 500 Internal Server Error
Content-Length: 120
Content-Type: application/json; charset=UTF-8
Date: Tue, 29 Nov 2011 00:33:48 GMT

{
    "instanceFault": {
        "code": 500,
        "message": "The server has either erred or is incapable of performing the requested operation."
    }
}

                    </programlisting>
         </example>
         <para> The error code (<code>code</code>) is returned in the
        body of the response for convenience. The <code>message</code>
        element returns a human-readable message that is appropriate
        for display to the end user. The <code>details</code> element
        is optional and may contain information that is useful for
        tracking down an error, such as a stack trace. The
          <code>details</code> element may or may not be appropriate
        for display to an end user, depending on the role and
        experience of the end user.</para>
         <para>The fault's root element (for example,
          <code>instanceFault</code>) may change depending on the type
        of error. </para>
         <para><?rax-fo keep-with-next?>The following two
          <code>badRequest</code> examples show errors when the volume
        size is invalid:</para>
         <example>
            <title>Example badRequest Fault on Volume Size Errors:
          XML</title>
            <?dbfo keep-together="always"?>
        <programlisting language="xml">
HTTP/1.1 400 None
Content-Type: application/xml
Content-Length: 121
Date: Mon, 28 Nov 2011 18:19:37 GMT

&lt;badRequest code="400" xmlns="http://docs.rackspace.com/cbs/api/v1.0"&gt;
    &lt;message&gt;
        Volume 'size' needs to be a positive integer value, -1.0 cannot be accepted.
    &lt;/message&gt;
&lt;/badRequest&gt;

                    </programlisting>
         </example>
         <example>
            <title>Example badRequest Fault on Volume Size Errors:
          JSON</title>
            <?dbfo keep-together="always"?>
        <programlisting language="json">
HTTP/1.1 400 None
Content-Length: 120
Content-Type: application/json; charset=UTF-8
Date: Tue, 29 Nov 2011 00:33:48 GMT

{
    "badRequest": {
        "code": 400,
        "message": "Volume 'size' needs to be a positive integer value, -1.0 cannot be accepted."
    }
}

                    </programlisting>
         </example>
         <para> The next two examples show <code>itemNotFound</code>
        errors:</para>
         <example>
            <title>Example itemNotFound Fault: XML</title>
            <?dbfo keep-together="always"?>
        <programlisting language="xml">
HTTP/1.1 404 Not Found
Content-Length: 147
Content-Type: application/xml; charset=UTF-8
Date: Mon, 28 Nov 2011 19:50:15 GMT

&lt;itemNotFound code="404" xmlns="http://docs.rackspace.com/cbs/api/v1.0"&gt;
    &lt;message&gt;
        The resource could not be found.
    &lt;/message&gt;
&lt;/itemNotFound&gt;

                    </programlisting>
         </example>
         <example>
            <title>Example itemNotFound Fault: JSON</title>
            <?dbfo keep-together="always"?>
        <programlisting language="json">
HTTP/1.1 404 Not Found
Content-Length: 78
Content-Type: application/json; charset=UTF-8
Date: Tue, 29 Nov 2011 00:35:24 GMT

{
    "itemNotFound": {
        "code": 404,
        "message": "The resource could not be found."
    }
}

                    </programlisting>
         </example>
      </section>
      <section xml:id="volume_status">
         <title>Volume Status</title>
         <para><?rax-fo keep-with-next?>When making an API call to
        create, list, or delete volume(s), the following volume status
        values are possible:</para>
         <itemizedlist spacing="compact">
            <listitem>
               <para>CREATING – The volume is being created.</para>
            </listitem>
            <listitem>
               <para>AVAILABLE – The volume is read to be attached to an instance.</para>
            </listitem>
            <listitem>
               <para>ATTACHING – The volume is attaching to an instance.</para>
            </listitem>
            <listitem>
               <para>IN-USE – The volume is attached to an instance.</para>
            </listitem>
            <listitem>
               <para>DELETING – The volume is being deleted.</para>
            </listitem>
            <listitem>
               <para>ERROR – There has been some error with the volume.</para>
            </listitem>
            <listitem>
               <para>ERROR_DELETING – There was an error deleting the volume.</para>
            </listitem>
         </itemizedlist>
      </section>
  </chapter>

  <chapter xml:id="volume">
      <title>API Operations</title>
      <para>The Volume API allows you to manage volumes and snapshots
      that can be used with the Compute API.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02"
                      href="../wadls/volume-api/src/os-volume-1.wadl"/>
  </chapter>

</book>